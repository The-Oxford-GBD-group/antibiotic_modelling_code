% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_parallel_model_mem.R
\name{estimate_parallel_model_mem}
\alias{estimate_parallel_model_mem}
\title{Estimate parallel_model.R memory requirements}
\usage{
estimate_parallel_model_mem(regions = NULL, npixels = NULL, nyears,
  ndraws, core_repo = "/share/code/geospatial/lbd_core/",
  shapefile_version = "current", print.tables = FALSE)
}
\arguments{
\item{regions}{string or string vector naming regions that you need
RAM estimates for. Either regions or npixels must be given.}

\item{npixels}{number of pixels in a region. if you already know
how many pixels are in a region, enter it directly to save the
function the time required to load and count the number of pixels
in a region}

\item{nyears}{number of years in model output. Integer}

\item{ndraws}{number of posterior draws the run will make. Integer}

\item{core_repo}{path to core_repo}

\item{shapefile_version}{string specifying version of shapefile to
use. This is needed if regions are given instead of npixels}

\item{print.tables}{logical. if true, the function will print the
RAM results tables in addition to returning a named list of the
tables}
}
\value{
A named list (names are entries in regions if supplied,
  otherwise names are ingteger value corresponding to the order of
  entries in npixels). Each list entry is a 2-column matrix
  containing a column of RAM suggestions and an estiamte of the
  change (in percantage points) that the RAM suggestion may not be
  large enough.
}
\description{
Based off of profiled model runs from 2018, AOZ
  performed some nonlinear regression to estimate the relationship
  between peak RAM usage and number of pixels, number of years, and
  the number of posterior samples in prediction
}
\details{
This function is meant as a STARTING POINT to determine how
  much memory a job requires. For each region (or pixels in a
  region) submitted to the function, the function will estimate
  suggested memory in GB that your run might need. It gives 4
  options per region that are increasingly 'safe' in the sense that
  they are increasingly conservative.

The regression that is used for estimation uses ACE/AVAS
methodology to perform the nonlinear regression. We assume that
peak memory usage occurs in genrating the large cell_pred object
and thus is a function of non-NA pixels in the region, the number
of years in the prediction, and the number of posterior samples.

In the returned suggestions, the first one is the best fit linear
relationship - and it goes through the middle of the dataset
meaning that it often would not estimate large enough memory
requirements. Suggestions 2, 3, and 4 add 1, 2, and 3 times
(respectively) the residual standard deviation from the nonlinear
fit. Basically this just adds some buffers of safety to the
regression. The outputs (printed and the output list) also store
the number of times that level of suggestion would have resulted in
the model using more memory than the prediction suggests. As you
choose a safer level to start, you are less likely to have you job
killed, but you eat up more resources... We leave it to the users
to determine how much safety vs how many jobs they would initially
like to run.

REMEMBER, this is only a starting point. Once you have runs
complete, look at the results from the run \code{(qacct -j \<jobid\>)} to
check what the actual mem max use was and then adjust your requests
accordingly.
}
\examples{
\dontrun{
model_info <- estimate_parallel_model_mem(regions = c('essa', 'name'), nyears = 17, ndraws = 500)
Region: essa
    SUGGESTED RAM (GB) CHANCE OF EXCEEDENCE (\\\%)
1:           308.3816               42.0287253
2:           424.5765               15.7450628
3:           584.5523                3.3752244
4:           804.8052                0.9335727

Region: name
    SUGGESTED RAM (GB) CHANCE OF EXCEEDENCE (\\\%)
1:           311.0521               42.0287253
2:           428.2532               15.7450628
3:           589.6143                3.3752244
4:           811.7745                0.9335727

}
}
