% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MBGPipeline.R
\docType{class}
\name{MBGPipeline}
\alias{MBGPipeline}
\title{MBG Pipeline Class}
\format{\code{\link{R6Class}} object.}
\usage{
MBGPipeline
}
\value{
Object of \code{\link{R6Class}} with the pipeline.
}
\description{
MBG Pipeline Class
}
\section{Fields}{

\describe{
\item{\code{indicator_group}}{Indicator group, for e.g. "training"}

\item{\code{indicator}}{Indicator name, for e.g. "tr_had_diarrhea"}

\item{\code{config_name}}{Name of config file (not recommended)}

\item{\code{config_file}}{Path to config file CSV (recommended using this)}

\item{\code{covs_name}}{Name of covariates config file (not recommended)}

\item{\code{covs_file}}{Path to covariates config file CSV (recommended using this)}

\item{\code{run_date}}{Initialize using a pre-made run-date if desired. The method \code{setup_rundate} can be used to tinker with run dates after this.}

\item{\code{core_repo}}{Path to \code{lbd_core} repository.}
}}

\section{Methods}{

\describe{
\item{\code{print}}{
  Prints the pipeline info
}

\item{\code{parse_conf}}{
 Parse a config parameter
  \emph{Arguments:}
  \itemize{
    \item{\code{conf_key}: Config parameter
    }
    \item{\code{conf_dt}: Config data.table in the Pipeline class.
    }
  }
}
\item{\code{eval_conf}}{
 Evaluate a config parameter
  \emph{Arguments:}
  \itemize{
    \item{\code{conf_key}: Config parameter
    }
    \item{\code{conf_dt}: Config data.table in the Pipeline class.
    }
  }
}

\item{\code{setup_conf}}{
 Wraps \code{set_up_config} to set up the config files
  \emph{Arguments:}
  \itemize{
    \item{\code{push_to_global_env}: Should the config parameters be pushed
    to the global environment? Highly recommend against this.
    }
    \item{\code{run_tests}: Run all the assertion tests for config params.
    }
  }
}

\item{\code{setup_rundate}}{
 Create or pass through a run date, with the option to do a full clean-up
 before creating the directory structure
  \emph{Arguments:}
  \itemize{
    \item{\code{run_date}: Create a new run date, or use the one initialized
    in the pipeline if set to \code{NULL}. If this argument and the
    initialized run date are left to be \code{NULL}, then a new time stamp is
    created.
    }
    \item{\code{full_cleanup}: If set to \code{TRUE}, then the run date
    folder will be cleaned up and then remade. Default: \code{FALSE}
    }
    \item{\code{suffix}: Suffix to add to run date? Default: \code{""}
    }
    \item{\code{prefix}: Prefix to add to run date? Default: \code{""}
    }
  }
}

\item{\code{make_holdouts}}{
 Makes holdouts, but depends on whether the config argument
 \code{makeholdouts} is set to \code{TRUE} or not.
  \emph{Arguments:}
  \itemize{
    \item{\code{withdate}: Used in \code{load_input_data}
    }
    \item{\code{date}: Run date
    }
  }
}

\item{\code{create_loopvars}}{
 Create table of region, age and holdouts to loop over, aka the
 loopvars table (TM).
}

}
}

\examples{
\dontrun{
Pipeline_Class <- MBGPipeline$new(
  core_repo = "/share/code/geospatial/sadatnfs/lbd_core/",
  indicator_group = "training",
  indicator = "tr_had_diarrhea",
  config_file = "/ihme/code/geospatial/sadatnfs/lbd_core/training/config_training_pipeline.csv",
  covs_name = "/ihme/code/geospatial/sadatnfs/lbd_core/training/covs_training.csv"
)
Pipeline_Class$setup_conf(
  push_to_global_env = FALSE,
  run_tests = TRUE
)
Pipeline_Class$setup_rundate(run_date = "run_MBG_run")
Pipeline_Class$make_holdouts()
Pipeline_Class$create_loopvars()
}

}
\keyword{MBG}
\keyword{pipeline}
