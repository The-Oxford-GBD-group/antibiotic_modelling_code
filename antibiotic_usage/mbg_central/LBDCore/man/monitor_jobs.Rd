% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monitor_jobs.R
\name{monitor_jobs}
\alias{monitor_jobs}
\title{Monitor and resubmit jobs}
\usage{
monitor_jobs(parallelize_output, sleeptime = 100,
  title = "Job Monitor", keep_temp_file = F, return_lv = F,
  max_tries = 1, notification = "none")
}
\arguments{
\item{parallelize_output}{output from the `parallelize()` function, where
`parallelize_output[[1]] is a data.table of loopvars
and `parallelize_output[[2]] is the filename that
contains the `save_objs` from parallelize}

\item{sleeptime}{how long to sleep for between checking the status of the jobs
running on the cluster? (numeric, in seconds)}

\item{title}{title for the looping output}

\item{keep_temp_file}{keep the temp file after this function exits?
logical; if `keep_temp_file = F` then temp file is deleted}

\item{return_lv}{should this function return the loopvars?}

\item{max_tries}{maximum number of times to resubmit a job before giving up}

\item{notification}{how would you like to be notified when jobs fail?
The only current option is "pushover" (via `pushover_notify()`)
but could be expanded to include email, etc. if desired}
}
\value{
loopvars in data table (if `return_lv = T`)
}
\description{
Function to monitor & resubmit jobs if they fail
This is intended as a replacement for \code{waitformodelstofinish()}
and its ilk.  This function takes output from \code{parallelize()}
and periodically submits qstat and qacct requests to see how
the jobs are running on the cluster.
}
\examples{
\dontrun{
# see example for `parallelize()` for workflow
# In master script:
monitor_jobs(output_from_parallelize,
  max_tries = 3,
  notification = "pushover"
)
}
}
