% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subnational_ts_plots.R
\name{subnational_ts_plots}
\alias{subnational_ts_plots}
\title{Function to create subnational time-series plots with accompanying maps}
\usage{
subnational_ts_plots(ad0_df, ad1_df, ad2_df, ad0_shape = NULL,
  ad1_shape = NULL, ad2_shape = NULL, ind_title, out_dir,
  out_filename_format = "subnational_ts_plots_\%s.pdf",
  val_range = c(0, 1), highisbad = T, ad0_map_regions = NULL,
  ad0_map_region_titles = NULL, ad1_map_countries = NULL,
  plot_levels = c("ad0", "ad1", "ad2"), multiple_runs = F,
  plot_data = F, ad0_data = NULL, ad1_data = NULL, ad2_data = NULL,
  title_plot_size = NULL, title_grob_size = NULL, verbose = F,
  shapefile_version = "current", tol = 0.001)
}
\arguments{
\item{ad0_df}{admin-0 level data.frame or data.table from the standard aggregation code}

\item{ad1_df}{admin-1 level data.frame or data.table from the standard aggregation code}

\item{ad2_df}{admin-2 level data.frame or data.table from the standard aggregation code.}

\item{ad0_shape}{admin0 SPDF object that corresponds to `ad0_df` above.
If none provided, loads from GAUL as default}

\item{ad1_shape}{admin1 SPDF object that corresponds to `ad1_df` above.
If none provided, loads from GAUL as default}

\item{ad2_shape}{admin2 SPDF object that corresponds to `ad2_df` above.
If none provided, loads from GAUL as default}

\item{ind_title}{title for your indicator, e.g. "DPT3 Coverage".
For use in plots in multiple places.  String.}

\item{out_dir}{output directory. String.}

\item{out_filename_format}{output filename format, in `sprintf()` format
with `\%s` representing the place where the
geographic identifier will go. String.}

\item{val_range}{range of values for your indicator. Default: [0,1]
Vector of length 2 (`c(min, max)`)}

\item{highisbad}{if T, higher values will be more red. Boolean.}

\item{ad0_map_regions}{if you want to have the national-level time series
broken down by modeling region, you can pass a vector
of region names here.  These will be processed by
`get_gaul_codes()` so need to be identified in that
function.}

\item{ad0_map_region_titles}{corresponding to ad0_map_regions, you can pass
titles for each of the map regions here (so that
`essa` is identified as "Eastern Sub-Saharan Africa",
for instance).  Vector of same length of ad0_map_regions}

\item{ad1_map_countries}{If specified, which countries do you want to plot at the admin1/admin2 level.
If null, the default is plotting all countries in the specified ad0_map_regions}

\item{plot_levels}{which administrative levels do you want to plot? Vector containing
any combination of "ad0", ad1", and/or "ad2".}

\item{multiple_runs}{should the function plot multiple model runs/ multiple indicators on the same plot? Boolean}

\item{plot_data}{should the function plot the collapsed admin input data? Boolean}

\item{ad0_data}{Collapsed admin0 input data, obtained using input_aggregate_admin function found below}

\item{ad1_data}{Collapsed admin1 input data, obtained using input_aggregate_admin function found below}

\item{ad2_data}{Collapsed admin2 input data, obtained using input_aggregate_admin function found below}

\item{title_plot_size}{if you want, you can specify a font size to be used for ind_title in text_element.
If none provided, default value is assigned}

\item{title_grob_size}{if you want, you can specify a font size to be used for ind_title in text_grob.
If none provided, default value is assigned}

\item{verbose}{should the function update progress along the way? Boolean.}

\item{shapefile_version}{specifies the shapefile version to be used. `current` or date `yyyy_mm_dd`}

\item{tol}{tolerance to be used when simplifying polygons. default `0.001` creates orphaned holes in GADM shapefile, can use `0.0001` to fix but the function slows down and outputs are larger.}
}
\value{
Saves a series of PDFs as described above in `out_dir`
}
\description{
This function is meant to create three sets of PDFs that show
time series plots of administrative-level estimates of your
modeled quantity of interest:

1) Plots of country-level estimates (single PDF), optionally one page per region.

2) Plots of admin1-level estimates (single PDF), one page per country.

3) Plots of admin2-level estimates (one PDF per country), one page per admin1.

As currently written this function is quite repetitive. This allows for each of the
maps to be tweaked more easily, but in the future it would be better to
encapsulate some of the repeated bits in flexible functions that can be
called for each of the categories of maps created above. This would
also potentially allow for the use of non-standard shapefiles, which isn't
well supported by the function at the moement.

All data tables referenced below (and accompanying shapefiles) must have the
standard ADM0_CODE, ADM0_NAME, etc. naming conventions and have those codes
and names included as columns / shapefile attributes. In addition,
the administrative estimates must have "mean", "upper", and "lower" columns
to allow uncertainty intervals to be plotted.
}
\examples{

\dontrun{
# Set up directories and files

# Set run_date, indicator, indicator_group, out_dir per your preferences

share_dir <- paste0("/share/geospatial/mbg/", indicator_group, "/",
                    indicator, "/output/", run_date, "/")
in_dir <- paste0(share_dir, "pred_derivatives/admin_summaries/")

in_file_ad0 <- paste0(in_dir, indicator, "_admin_0_raked_summary.csv")
in_file_ad1 <- paste0(in_dir, indicator, "_admin_1_raked_summary.csv")
in_file_ad2 <- paste0(in_dir, indicator, "_admin_2_raked_summary.csv")

# Prepare inputs

ad0_df <- fread(in_file_ad0)
ad1_df <- fread(in_file_ad1)
ad2_df <- fread(in_file_ad2)

# Drop Ma'tan al-Sarra if present
ad0_df <- subset(ad0_df, ADM0_CODE != 40762)
ad1_df <- subset(ad1_df, ADM0_CODE != 40762)
ad2_df <- subset(ad2_df, ADM0_CODE != 40762)

# Load GAUL shapefiles

# Pre-loading them here and using the "africa" background map instead of default GAUL
# since it's a bit prettier - cuts off far-outlying islands, etc.)

ad0_shape <- readRDS("/share/geospatial/rds_shapefiles/background_map_africa/background_map_africa.rds")
ad1_shape <- readOGR(get_admin_shapefile(admin_level=1))
ad2_shape <- readOGR(get_admin_shapefile(admin_level=2))

# Run the plotting code

subnational_ts_plots(ad0_df = ad0_df,
                     ad1_df = ad1_df,
                     ad2_df = ad2_df,
                     ad0_shape = ad0_shape,
                     ad1_shape = ad1_shape,
                     ad2_shape = ad2_shape,
                     ind_title = "My Indicator",
                     out_dir = out_dir,
                     highisbad = F,
                     val_range = c(0,1),
                     ad0_map_regions = c("cssa", "essa", "name", "sssa", "wssa"),
                     ad0_map_region_titles = c("Central Sub-Saharan Africa",
                                               "Eastern Sub-Saharan Africa",
                                               "Northern Africa",
                                               "Southern Sub-Saharan Africa",
                                               "Western Sub-Saharan Africa"),
                     verbose = T)

## Running plotting code for multiple model runs or multiple indicators

 Set up directories and files

# Set run_dates (for multiple model runs), indicator (or indicators), indicator_group, out_dir per your preferences

run_dates <- c("run_date_1", "run_date_2,... "run_date_x)
run_label <- c("indicator 1", "indicator 2",... "indicator x")
indicator <- c("indicator 1", "indicator 2", ... "indicator x")
share_dir <- paste0("/share/geospatial/mbg/", indicator_group, "/",
                    indicator, "/output/", run_dates, "/")
in_dir <- paste0(share_dir, "pred_derivatives/admin_summaries/")

in_file_ad0 <- paste0(in_dir, indicator, "_admin_0_raked_summary.csv")
in_file_ad1 <- paste0(in_dir, indicator, "_admin_1_raked_summary.csv")
in_file_ad2 <- paste0(in_dir, indicator, "_admin_2_raked_summary.csv")

# Prepare inputs

Read in all mode admin aggregations, adding run label to each with add_run_label function
ad0_df <- lapply(in_file_ad0, fread) \%>\% add_run_label(run_label)
ad1_df <- lapply(in_file_ad1, fread) \%>\% add_run_label(run_label)
ad2_df <- lapply(in_file_ad2, fread) \%>\% add_run_label(run_label)

# Drop Ma'tan al-Sarra if present
ad0_df <- subset(ad0_df, ADM0_CODE != 40762)
ad1_df <- subset(ad1_df, ADM0_CODE != 40762)
ad2_df <- subset(ad2_df, ADM0_CODE != 40762)

Only load shapefiles if you do not intend to use the GAUL shapefiles; the function has been written
so that if you are using GAUL you do not have to simplify the shape each time. This will make the function much quicker

# Run the plotting code

subnational_ts_plots(ad0_df = ad0_df,
                     ad1_df = ad1_df,
                     ad2_df = ad2_df,
                     ind_title = "My Indicator",
                     out_dir = out_dir,
                     highisbad = F,
                     val_range = c(0,1),
                     ad0_map_regions = c("cssa", "essa", "name", "sssa", "wssa"),
                     ad0_map_region_titles = c("Central Sub-Saharan Africa",
                                               "Eastern Sub-Saharan Africa",
                                               "Northern Africa",
                                               "Southern Sub-Saharan Africa",
                                               "Western Sub-Saharan Africa"),
                     multiple_runs = T,
                     verbose = T)


# to see example of running plots with data, see input_aggregate_admin function. See add_run_label function for questions containing how to specify "run" column
}
}
\author{
Jon Mosser, \email{jmosser@uw.edu}
}
