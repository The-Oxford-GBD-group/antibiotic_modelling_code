% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/draw_mesh.R
\name{draw.mesh}
\alias{draw.mesh}
\title{Plots, in 3d, a s2-manifold or r2-manifold mesh}
\usage{
draw.mesh(mesh, draw.edges = TRUE, draw.segments = TRUE,
  draw.plane = F, node.cols = NULL, col.type = "bw",
  window.dims = c(840, 400), plot.mirror = FALSE)
}
\arguments{
\item{mesh}{an inla.mesh object}

\item{draw.edges}{Logical. Draw the edges between the vertices?}

\item{draw.segments}{Logical. Draw the segments that bound the mesh
object?}

\item{draw.plane}{Logical. Draw a planar shape to aid in displaying
curvature of mesh?}

\item{node.cols}{Numeric vector with length equal to the number of
mesh vertices (mesh$n). e.g. pass in the posterior mean of the
spatial random effects heights to visualize the fitted GP.}

\item{col.type}{String taking value of either 'bw' or 'col' and
determining whether the color of the surface should be drawn in
black and white or in color. Only used if a node.cols vector is
passed in.}

\item{window.dims}{2d numeric vector describing the width and
height of the plotting in pixels}

\item{plot.mirror}{Logical. Should a mirror image of the mesh be
added to the plot (could help visualize mesh if printing to a
static image)}

\item{returns}{nothing but spawns an interactive plot window}
}
\description{
This function allows 3d drawing and imaging of a mesh.inla
object. it can plot either a mesh constructed on the R2 or S2
manifold. NOTE that it requires the 'rgl' R package and it spawns
interactive graphics windows. it is untested on the cluster and is
meant for use on local machines
}
\examples{
\dontrun{
# plot a mesh. add color to the background that results from
# the linear interpolation of randomly generated nodal (basis
# height) values
draw.s2.mesh(mesh_s,
  draw.edges = T, draw.segments = T, col.type = "col",
  node.cols = rnorm(n = mesh_s$n), draw.plane = F
)

## take a snapshot to save to file
fig.path <- "/path/to/outputdir/"
rgl::rgl.snapshot(file.path(fig.path, "mesh.png"), top = TRUE)

## shut down the graphics window
rgl::rgl.close()
}

}
