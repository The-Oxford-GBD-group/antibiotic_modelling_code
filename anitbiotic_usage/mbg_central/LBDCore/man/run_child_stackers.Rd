% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_child_stackers.R
\name{run_child_stackers}
\alias{run_child_stackers}
\title{Fitting child stackers}
\usage{
run_child_stackers(models, input_data, indicator = indicator,
  indicator_family = "binomial", covariates_nonbrt = all_fixed_effects,
  covariates_brt = all_fixed_effects_brt, outputdir = outputdir,
  reg = reg)
}
\arguments{
\item{models}{a vector of sub-models to run}

\item{input_data}{the data frame with the input data, defaulted to \code{the_data} from the global environment}

\item{indicator}{Indicator name e.g. "tr_had_diarrhea"}

\item{indicator_family}{Model family (e.g. "binomial")}

\item{covariates_nonbrt}{Covariates used in non-BRT child models}

\item{covariates_brt}{Covariates used in BRT (GBM or XGBOOST) child models}

\item{outputdir}{Output directory}

\item{reg}{Region}
}
\value{
A list of sub-model predictions and model objects where the first element of each list member are the predictions,
and the second element the model statistics and summary
}
\description{
Parallelization in stackers is a little bit complicated. Some of the stackers
rely on packages like "mgcv" and "glmnet" which have their own internal
parallelization which we have to make sure plays nice with the MKL.
\code{mclapply()} is used heavily in stackers as well which will hang with
multithreaded operations like OpenMP or MKL.
Those stacking functions which have a "cores" argument have an "auto" option
(default) where the stacker function has code to properly determine how many
cores to give each operation based on how it is parallelized, how many cores
are available for the job based on slots, etc. It is highly recommended that
the "auto" option be used. Otherwise, you may pass in an integer argument for
the number of cores. The only value that is known to work generally on all
stackers is 1, or serial operation.
}
